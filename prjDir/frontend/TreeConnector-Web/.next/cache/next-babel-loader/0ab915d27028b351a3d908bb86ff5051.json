{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/jaeho/gitlab/TreeConnector-Web/pages/mytree.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Layout from '../components/Layout';\nimport axios from 'axios';\n\nvar MyTree = /*#__PURE__*/function (_React$Component) {\n  _inherits(MyTree, _React$Component);\n\n  var _super = _createSuper(MyTree);\n\n  function MyTree() {\n    _classCallCheck(this, MyTree);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MyTree, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var tress = this.props.tress;\n      var treeList = trees.map(function (tree) {\n        return __jsx(\"li\", {\n          key: tree.id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 21\n          }\n        }, tree.username);\n      });\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }\n      }, \"\\uB0B4 \\uB098\\uBB34 \\uC870\\uD68C\", __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      }, treeList));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var req, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                _context.next = 3;\n                return axios.get('https://jsonplaceholder.typicode.com/users');\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", {\n                  trees: response.data\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return MyTree;\n}(React.Component);\n\nexport default MyTree;","map":{"version":3,"sources":["/home/jaeho/gitlab/TreeConnector-Web/pages/mytree.js"],"names":["Layout","axios","MyTree","tress","props","treeList","trees","map","tree","id","username","req","get","response","data","React","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,M;;;;;;;;;;;;;6BAQO;AAAA;;AAAA,UAEGC,KAFH,GAEa,KAAKC,KAFlB,CAEGD,KAFH;AAIL,UAAME,QAAQ,GAAGC,KAAK,CAACC,GAAN,CACb,UAAAC,IAAI;AAAA,eAAI;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmBD,IAAI,CAACE,QAAxB,CAAJ;AAAA,OADS,CAAjB;AAIA,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKL,QADL,CAFJ,CADJ;AAQH;;;;;;;;;;AAvB8BM,gBAAAA,G,QAAAA,G;;uBACJV,KAAK,CAACW,GAAN,CAAU,4CAAV,C;;;AAAjBC,gBAAAA,Q;iDACE;AACJP,kBAAAA,KAAK,EAAEO,QAAQ,CAACC;AADZ,iB;;;;;;;;;;;;;;;;;;;EAHKC,KAAK,CAACC,S;;AA2B3B,eAAed,MAAf","sourcesContent":["import Layout from '../components/Layout';\r\nimport axios from 'axios';\r\n\r\nclass MyTree extends React.Component {\r\n    static async getInitialProps ({req}) {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n        return  {\r\n            trees: response.data\r\n        }\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { tress } = this.props;\r\n\r\n        const treeList = trees.map(\r\n            tree => <li key={tree.id}>{tree.username}</li>\r\n        )\r\n\r\n        return (\r\n            <Layout>\r\n                내 나무 조회\r\n                <ul>\r\n                    {treeList}\r\n                </ul>\r\n            </Layout>\r\n        )\r\n    }\r\n\r\n}\r\nexport default MyTree;"]},"metadata":{},"sourceType":"module"}
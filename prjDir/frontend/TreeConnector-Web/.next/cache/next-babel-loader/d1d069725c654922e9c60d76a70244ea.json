{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/media/jaeho/EXTSSD/gitlab/TreeConnector-Web/pages/treeinfo.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Layout from '../components/Layout';\nimport axios from 'axios';\nimport API_URL from '../components/ApiUrl';\n\nvar TreeInfo = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeInfo, _React$Component);\n\n  var _super = _createSuper(TreeInfo);\n\n  function TreeInfo() {\n    _classCallCheck(this, TreeInfo);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TreeInfo, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          diagnoses = _this$props.diagnoses,\n          treatments = _this$props.treatments;\n      var diagnosisList = diagnoses.map(function (diagnosis) {\n        return __jsx(\"li\", {\n          key: diagnosis.Id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 26\n          }\n        }, diagnosis.Content, \" / \", diagnosis.Timestamp, \" / \\uB2F4\\uB2F9 : \", diagnosis.DoctorId);\n      });\n      var treatmentList = treatments.map(function (treatment) {\n        return __jsx(\"li\", {\n          key: treatment.Id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 26\n          }\n        }, treatment.Content, \" / \", treatment.Timestamp, \"/ \\uB2F4\\uB2F9 : \", treatment.TherapistId);\n      });\n      return __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, \"\\uC9C4\\uB2E8\\uC11C \\uB9AC\\uC2A4\\uD2B8\", __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, diagnosisList), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 41\n        }\n      }), \"\\uCE58\\uB8CC \\uB0B4\\uC5ED \\uB9AC\\uC2A4\\uD2B8\", __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }\n      }, treatmentList));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var req, diagnoses, treatments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req;\n                _context.next = 3;\n                return axios.get(API_URL + '/listdiagnoses');\n\n              case 3:\n                diagnoses = _context.sent;\n                _context.next = 6;\n                return axios.get(API_URL + '/listreatments');\n\n              case 6:\n                treatments = _context.sent;\n                return _context.abrupt(\"return\", {\n                  diagnoses: diagnoses.data.response,\n                  treatments: treatments.data.response\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return TreeInfo;\n}(React.Component);\n\nexport default TreeInfo;","map":{"version":3,"sources":["/media/jaeho/EXTSSD/gitlab/TreeConnector-Web/pages/treeinfo.js"],"names":["Layout","axios","API_URL","TreeInfo","props","diagnoses","treatments","diagnosisList","map","diagnosis","Id","Content","Timestamp","DoctorId","treatmentList","treatment","TherapistId","req","get","data","response","React","Component"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;IAEMC,Q;;;;;;;;;;;;;6BAUO;AAAA;;AAAA,wBAC6B,KAAKC,KADlC;AAAA,UACGC,SADH,eACGA,SADH;AAAA,UACcC,UADd,eACcA,UADd;AAEL,UAAMC,aAAa,GAAGF,SAAS,CAACG,GAAV,CAClB,UAAAC,SAAS;AAAA,eAAI;AAAI,UAAA,GAAG,EAAEA,SAAS,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwBD,SAAS,CAACE,OAAlC,SAA8CF,SAAS,CAACG,SAAxD,wBAA2EH,SAAS,CAACI,QAArF,CAAJ;AAAA,OADS,CAAtB;AAGA,UAAMC,aAAa,GAAGR,UAAU,CAACE,GAAX,CAClB,UAAAO,SAAS;AAAA,eAAI;AAAI,UAAA,GAAG,EAAEA,SAAS,CAACL,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwBK,SAAS,CAACJ,OAAlC,SAA8CI,SAAS,CAACH,SAAxD,uBAA0EG,SAAS,CAACC,WAApF,CAAJ;AAAA,OADS,CAAtB;AAIA,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKT,aAAL,CAFJ,EAE4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAF5B,kDAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKO,aAAL,CAJJ,CADJ;AAQH;;;;;;;;;;AA1B8BG,gBAAAA,G,QAAAA,G;;uBACHhB,KAAK,CAACiB,GAAN,CAAUhB,OAAO,GAAG,gBAApB,C;;;AAAlBG,gBAAAA,S;;uBACmBJ,KAAK,CAACiB,GAAN,CAAUhB,OAAO,GAAG,gBAApB,C;;;AAAnBI,gBAAAA,U;iDACC;AACHD,kBAAAA,SAAS,EAAEA,SAAS,CAACc,IAAV,CAAeC,QADvB;AAEHd,kBAAAA,UAAU,EAAEA,UAAU,CAACa,IAAX,CAAgBC;AAFzB,iB;;;;;;;;;;;;;;;;;;;EAJQC,KAAK,CAACC,S;;AA8B7B,eAAenB,QAAf","sourcesContent":["import Layout from '../components/Layout';\nimport axios from 'axios';\nimport API_URL from '../components/ApiUrl';\n\nclass TreeInfo extends React.Component {\n    static async getInitialProps ({req}) {\n        const diagnoses = await axios.get(API_URL + '/listdiagnoses');\n        const treatments = await axios.get(API_URL + '/listreatments');\n        return {\n            diagnoses: diagnoses.data.response,\n            treatments: treatments.data.response\n        }\n    }\n\n    render() {\n        const { diagnoses, treatments } = this.props;\n        const diagnosisList = diagnoses.map(\n            diagnosis => <li key={diagnosis.Id}>{diagnosis.Content} / {diagnosis.Timestamp} / 담당 : {diagnosis.DoctorId}</li>\n        )\n        const treatmentList = treatments.map(\n            treatment => <li key={treatment.Id}>{treatment.Content} / {treatment.Timestamp}/ 담당 : {treatment.TherapistId}</li>\n        )\n\n        return(\n            <Layout>\n                진단서 리스트\n                <ul>{diagnosisList}</ul><br />\n                치료 내역 리스트\n                <ul>{treatmentList}</ul>\n            </Layout>\n        )\n    }\n}\n\nexport default TreeInfo;"]},"metadata":{},"sourceType":"module"}